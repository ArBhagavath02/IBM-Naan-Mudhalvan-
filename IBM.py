# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nULeqg0e6gIHJiBiyWFzFZwMVrp2EdbU
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import GradientBoostingRegressor
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Load your dataset (assuming it's in a CSV file)
data = pd.read_csv('/content/NetflixOriginals.csv',encoding='latin-1')

# Preprocessing: Handle missing values, encode categorical features, etc.
# For simplicity, we'll assume that preprocessing has been done.

# Define features (X) and target variable (y)
X = data[['Runtime']]  # Add relevant features
y = data['IMDB Score']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Gradient Boosting Regressor
gb_regressor = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)

# Train the Gradient Boosting model
gb_regressor.fit(X_train, y_train)

# Make predictions
gb_predictions = gb_regressor.predict(X_test)

# Evaluate the Gradient Boosting model
gb_mse = mean_squared_error(y_test, gb_predictions)
print(f"Gradient Boosting Mean Squared Error: {gb_mse}")

# Neural Network model
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)  # Output layer with 1 neuron for regression
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the Neural Network model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)

# Make predictions with the Neural Network
nn_predictions = model.predict(X_test)

# Evaluate the Neural Network model
nn_mse = mean_squared_error(y_test, nn_predictions)
print(f"Neural Network Mean Squared Error: {nn_mse}")